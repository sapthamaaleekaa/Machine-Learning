installed.packages()
installed.packages("dplr")
install.packages("installr")
install.packages("updater")
updateR()
install.packages("installr"); library(installr) # install+load installr
updateR() # updating R.
updateR(T)
install.packages("dplr")
install.packages("dplR")
library("dplR", lib.loc="~/R/win-library/3.5")
installed.packages()
###########Load bostin data
require("MASS")
data(Boston)
help(Boston)
summary(Boston)
hist(Boston$medv)
summary(Boston$medv)
###################75% of data are less than 3rd quartile
###########
Boston$medv_class<-ifelse(Boston$medv >=25,1,0)
summary(Boston)
hist(Boston$medv_class)
plot(Boston$medv_class,Boston$lstat)
plot(Boston$medv,Boston$lstat)
plot(Boston$medv_class~Boston$lstat)
###########Create a sample model
model=lm(medv_class~lstat,data=Boston)
summary(model)
##################
Boston$predict<-predict.lm(model,Boston)
Boston$prob_class_1<-exp(Boston$predict)/(1+exp(Boston$predict))
View(Boston)
names(Boston)
plot(Boston$prob_class_1,Boston$lstat)
#################Expected probablity of a high value property
####value of lstat vs probablity of housing greater than 25k
###########Now build a logistic regression model
colnames(Boston)
###########Load bostin data
require("MASS")
data(Boston)
help(Boston)
summary(Boston)
hist(Boston$medv)
summary(Boston$medv)
###################75% of data are less than 3rd quartile
###########
Boston$medv_class<-ifelse(Boston$medv >=25,1,0)
summary(Boston)
hist(Boston$medv_class)
plot(Boston$medv_class,Boston$lstat)
plot(Boston$medv,Boston$lstat)
plot(Boston$medv_class~Boston$lstat)
###########Create a sample model
model=lm(medv_class~lstat,data=Boston)
summary(model)
##################
Boston$predict<-predict.lm(model,Boston)
Boston$prob_class_1<-exp(Boston$predict)/(1+exp(Boston$predict))
View(Boston)
names(Boston)
plot(Boston$prob_class_1,Boston$lstat)
#################Expected probablity of a high value property
####value of lstat vs probablity of housing greater than 25k
###########Now build a logistic regression model
colnames(Boston)
model<-glm(formula=medv_class~.-medv,data=Boston[,250],family=binomial("logit"))
predict.glm(model,newdata=Boston[,250:],type="response")
summary(Boston$medv_class)
class(Boston$medv_class)
###########Load bostin data
require("MASS")
data(Boston)
help(Boston)
summary(Boston)
hist(Boston$medv)
summary(Boston$medv)
###################75% of data are less than 3rd quartile
###########
Boston$medv_class<-ifelse(Boston$medv >=25,1,0)
summary(Boston)
hist(Boston$medv_class)
plot(Boston$medv_class,Boston$lstat)
plot(Boston$medv,Boston$lstat)
plot(Boston$medv_class~Boston$lstat)
###########Create a sample model
model=lm(medv_class~lstat,data=Boston)
summary(model)
##################
Boston$predict<-predict.lm(model,Boston)
Boston$prob_class_1<-exp(Boston$predict)/(1+exp(Boston$predict))
View(Boston)
names(Boston)
plot(Boston$prob_class_1,Boston$lstat)
#################Expected probablity of a high value property
####value of lstat vs probablity of housing greater than 25k
###########Now build a logistic regression model
colnames(Boston)
model<-glm(formula=medv_class~.-medv,data=Boston[0:250,],family=binomial("logit"))
predict.glm(model,newdata=Boston[250:,],type="response")
summary(Boston$medv_class)
class(Boston$medv_class)
###########Load bostin data
require("MASS")
data(Boston)
help(Boston)
summary(Boston)
hist(Boston$medv)
summary(Boston$medv)
###################75% of data are less than 3rd quartile
###########
Boston$medv_class<-ifelse(Boston$medv >=25,1,0)
summary(Boston)
hist(Boston$medv_class)
plot(Boston$medv_class,Boston$lstat)
plot(Boston$medv,Boston$lstat)
plot(Boston$medv_class~Boston$lstat)
###########Create a sample model
model=lm(medv_class~lstat,data=Boston)
summary(model)
##################
Boston$predict<-predict.lm(model,Boston)
Boston$prob_class_1<-exp(Boston$predict)/(1+exp(Boston$predict))
View(Boston)
names(Boston)
plot(Boston$prob_class_1,Boston$lstat)
#################Expected probablity of a high value property
####value of lstat vs probablity of housing greater than 25k
###########Now build a logistic regression model
colnames(Boston)
model<-glm(formula=medv_class~.-medv,data=Boston[c(0:250),],family=binomial("logit"))
predict.glm(model,newdata=Boston[c(250:506),],type="response")
summary(Boston$medv_class)
class(Boston$medv_class)
predict.glm(model,newdata=Boston[c(250:506),],type="response")
?predict.glm
model<-glm(formula=medv_class~.-medv,data=Boston[c(0:250),],family=binomial("logit"))
out <- predict.glm(model,newdata=Boston[c(250:506),],type="response")
predicted.classes <- ifelse(out > 0.8, "pos", "neg")
predicted.classes
head(predicted.classes,10)
summary(m5)
summary(m5)
summary(m1)
m1 <- lm(train$amount_spent_per_room_night_scaled ~ ., data = train)
setwd("C:\\Users\\Home\\Desktop\\Saptha\\Machine-Learning\\clubmahindra")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121')
setwd("C:\\Users\\Home\\Desktop\\Saptha\\Machine-Learning\\clubmahindra")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121')
library('eeptools')
library("MASS")
library(caTools)
library('randomForest')
library("pROC") #For ROC curve
library('ggplot2')
set.seed(100)
train <- read.csv("train.csv",stringsAsFactors = FALSE)
test <- read.csv("test.csv",stringsAsFactors = FALSE)
str(train)
na_columns = colnames(train)[colSums(is.na(train)) > 0]
non_na_columns = setdiff(colnames(train),na_columns)
# > na_columns
# [1] "season_holidayed_code" "state_code_residence"
na_columns = colnames(test)[colSums(is.na(test)) > 0]
non_na_columns = setdiff(colnames(test),na_columns)
reservation <- as.factor(train$reservation_id)
str(reservation)
train$reservation_id <- NULL
reservationTest <- as.factor(test$reservation_id)
str(reservationTest)
test$reservation_id <- NULL
member <- as.factor(train$memberid)
str(member)
train$memberid <- NULL
test$memberid <- NULL
booking_checkin_diff <- abs(as.numeric(as.Date(train$checkin_date,"%d/%m/%Y") - as.Date(train$booking_date,"%d/%m/%Y")))
checkin_checkout_diff <- abs(as.numeric(as.Date(train$checkout_date,"%d/%m/%Y") - as.Date(train$checkin_date,"%d/%m/%Y")))
train$booking_checkin_diff <- booking_checkin_diff
train$checkin_checkout_diff <- checkin_checkout_diff
booking <- train$booking_date
train$booking_date <- NULL
checkin <- train$checkin_date
train$checkin_date <- NULL
checkout <- train$checkout_date
train$checkout_date <- NULL
summary(train)
booking_checkin_diff <- abs(as.numeric(as.Date(test$checkin_date,"%d/%m/%Y") - as.Date(test$booking_date,"%d/%m/%Y")))
checkin_checkout_diff <- abs(as.numeric(as.Date(test$checkout_date,"%d/%m/%Y") - as.Date(test$checkin_date,"%d/%m/%Y")))
test$booking_checkin_diff <- booking_checkin_diff
test$checkin_checkout_diff <- checkin_checkout_diff
test$booking_date <- NULL
test$checkout_date <- NULL
test$checkin_date <- NULL
train$channel_code <- as.factor(train$channel_code)
train$main_product_code <- as.factor(train$main_product_code)
test$channel_code <- as.factor(test$channel_code)
test$main_product_code <- as.factor(test$main_product_code)
################ Identifying categorical columns and converting them to factors ################
personid <- as.factor(train$persontravellingid)
summary(personid)
train$persontravellingid <- as.factor(train$persontravellingid)
train$resort_region_code <- as.factor(train$resort_region_code)
train$resort_type_code <- as.factor(train$resort_type_code)
train$room_type_booked_code <- as.factor(train$room_type_booked_code)
train$season_holidayed_code <- as.factor(train$season_holidayed_code)
train$state_code_resort <- as.factor(train$state_code_resort)
stateid <- as.factor(train$state_code_residence)
summary(stateid)
train$state_code_residence <- as.factor(train$state_code_residence)
train$member_age_buckets <- as.factor(train$member_age_buckets)
train$booking_type_code <- as.factor(train$booking_type_code)
train$cluster_code <- as.factor(train$booking_type_code)
train$reservationstatusid_code <- as.factor(train$reservationstatusid_code)
train$resort_id <- as.factor(train$resort_id)
test$persontravellingid <- as.factor(test$persontravellingid)
test$resort_region_code <- as.factor(test$resort_region_code)
test$resort_type_code <- as.factor(test$resort_type_code)
test$room_type_booked_code <- as.factor(test$room_type_booked_code)
test$season_holidayed_code <- as.factor(test$season_holidayed_code)
test$state_code_resort <- as.factor(test$state_code_resort)
test$state_code_residence <- as.factor(test$state_code_residence)
test$member_age_buckets <- as.factor(test$member_age_buckets)
test$booking_type_code <- as.factor(test$booking_type_code)
test$cluster_code <- as.factor(test$booking_type_code)
test$reservationstatusid_code <- as.factor(test$reservationstatusid_code)
test$resort_id <- as.factor(test$resort_id)
########## Handling Missing values ##########
summary(train$season_holidayed_code)
ggplot(train,aes(x = train$season_holidayed_code)) + geom_bar(color = "black" , aes(fill = train$season_holidayed_code)) + labs(title = "season_holidayed_code")
train$season_holidayed_code<- as.character(train$season_holidayed_code)
# Imputing with mode
train$season_holidayed_code<- ifelse(is.na(train$season_holidayed_code),"2", train$season_holidayed_code)
train$season_holidayed_code<- as.factor(train$season_holidayed_code)
summary(train$season_holidayed_code)
summary(train$state_code_residence)
ggplot(train,aes(x = train$state_code_residence)) + geom_bar(color = "black" , aes(fill = train$state_code_residence)) + labs(title = "state_code_residence")
train$state_code_residence<- as.character(train$state_code_residence)
# Imputing with mode
train$state_code_residence<- ifelse(is.na(train$state_code_residence),"8", train$state_code_residence)
train$state_code_residence<- as.factor(train$state_code_residence)
summary(train$state_code_residence)
# Handling single row category
train$reservationstatusid_code<- as.character(train$reservationstatusid_code)
# Imputing with mode
train$reservationstatusid_code<- ifelse(train$reservationstatusid_code == 'D',"A", train$reservationstatusid_code)
train$reservationstatusid_code<- as.factor(train$reservationstatusid_code)
summary(train$reservationstatusid_code)
summary(test$season_holidayed_code)
ggplot(test,aes(x = test$season_holidayed_code)) + geom_bar(color = "black" , aes(fill = test$season_holidayed_code)) + labs(title = "season_holidayed_code")
test$season_holidayed_code<- as.character(test$season_holidayed_code)
# Imputing with mode
test$season_holidayed_code<- ifelse(is.na(test$season_holidayed_code),"2", test$season_holidayed_code)
test$season_holidayed_code<- as.factor(test$season_holidayed_code)
summary(test$season_holidayed_code)
summary(test$state_code_residence)
ggplot(test,aes(x = test$state_code_residence)) + geom_bar(color = "black" , aes(fill = test$state_code_residence)) + labs(title = "state_code_residence")
test$state_code_residence<- as.character(test$state_code_residence)
# Imputing with mode
test$state_code_residence<- ifelse(is.na(test$state_code_residence),"8", test$state_code_residence)
test$state_code_residence<- as.factor(test$state_code_residence)
summary(test$state_code_residence)
train$resort_type_season_holidayed_code <- paste(as.character(train$resort_type_code),as.character(train$season_holidayed_code), sep = "")
train$resort_type_season_holidayed_code <- as.factor(train$resort_type_season_holidayed_code)
test$resort_type_season_holidayed_code <- paste(as.character(test$resort_type_code),as.character(test$season_holidayed_code), sep = "")
test$resort_type_season_holidayed_code <- as.factor(test$resort_type_season_holidayed_code)
train$resort_region_season_holidayed_code <- paste(as.character(train$resort_region_code),as.character(train$season_holidayed_code), sep = "")
train$resort_region_season_holidayed_code <- as.factor(train$resort_region_season_holidayed_code)
test$resort_region_season_holidayed_code <- paste(as.character(test$resort_region_code),as.character(test$season_holidayed_code), sep = "")
test$resort_region_season_holidayed_code <- as.factor(test$resort_type_season_holidayed_code)
############## Finding Categorical variables ###############
isfactor <-train[,sapply(train,is.factor)]
isfactorcolumns <- colnames(isfactor)
################### Finding Continuos variables ############
iscontinuoscolumns <- setdiff(colnames(train),isfactorcolumns)
iscontinuoscolumns <- iscontinuoscolumns[-5]
iscontinuos <- train[,iscontinuoscolumns]
summary(train)
dim(train)
summary(test)
dim(test)
m1 <- lm(train$amount_spent_per_room_night_scaled ~ ., data = train)
summary(m1)
setwd("C:\\Users\\Home\\Desktop\\Saptha\\Machine-Learning\\clubmahindra")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121')
setwd("C:\\Users\\Home\\Desktop\\Saptha\\Machine-Learning\\clubmahindra")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121')
library('eeptools')
library("MASS")
library(caTools)
library('randomForest')
library("pROC") #For ROC curve
library('ggplot2')
set.seed(100)
train <- read.csv("train.csv",stringsAsFactors = FALSE)
test <- read.csv("test.csv",stringsAsFactors = FALSE)
str(train)
na_columns = colnames(train)[colSums(is.na(train)) > 0]
non_na_columns = setdiff(colnames(train),na_columns)
# > na_columns
# [1] "season_holidayed_code" "state_code_residence"
na_columns = colnames(test)[colSums(is.na(test)) > 0]
non_na_columns = setdiff(colnames(test),na_columns)
reservation <- as.factor(train$reservation_id)
str(reservation)
train$reservation_id <- NULL
reservationTest <- as.factor(test$reservation_id)
str(reservationTest)
test$reservation_id <- NULL
member <- as.factor(train$memberid)
str(member)
train$memberid <- NULL
test$memberid <- NULL
booking_checkin_diff <- abs(as.numeric(as.Date(train$checkin_date,"%d/%m/%Y") - as.Date(train$booking_date,"%d/%m/%Y")))
checkin_checkout_diff <- abs(as.numeric(as.Date(train$checkout_date,"%d/%m/%Y") - as.Date(train$checkin_date,"%d/%m/%Y")))
train$booking_checkin_diff <- booking_checkin_diff
train$checkin_checkout_diff <- checkin_checkout_diff
booking <- train$booking_date
train$booking_date <- NULL
checkin <- train$checkin_date
train$checkin_date <- NULL
checkout <- train$checkout_date
train$checkout_date <- NULL
summary(train)
booking_checkin_diff <- abs(as.numeric(as.Date(test$checkin_date,"%d/%m/%Y") - as.Date(test$booking_date,"%d/%m/%Y")))
checkin_checkout_diff <- abs(as.numeric(as.Date(test$checkout_date,"%d/%m/%Y") - as.Date(test$checkin_date,"%d/%m/%Y")))
test$booking_checkin_diff <- booking_checkin_diff
test$checkin_checkout_diff <- checkin_checkout_diff
test$booking_date <- NULL
test$checkout_date <- NULL
test$checkin_date <- NULL
train$channel_code <- as.factor(train$channel_code)
train$main_product_code <- as.factor(train$main_product_code)
test$channel_code <- as.factor(test$channel_code)
test$main_product_code <- as.factor(test$main_product_code)
################ Identifying categorical columns and converting them to factors ################
personid <- as.factor(train$persontravellingid)
summary(personid)
train$persontravellingid <- as.factor(train$persontravellingid)
train$resort_region_code <- as.factor(train$resort_region_code)
train$resort_type_code <- as.factor(train$resort_type_code)
train$room_type_booked_code <- as.factor(train$room_type_booked_code)
train$season_holidayed_code <- as.factor(train$season_holidayed_code)
train$state_code_resort <- as.factor(train$state_code_resort)
stateid <- as.factor(train$state_code_residence)
summary(stateid)
train$state_code_residence <- as.factor(train$state_code_residence)
train$member_age_buckets <- as.factor(train$member_age_buckets)
train$booking_type_code <- as.factor(train$booking_type_code)
train$cluster_code <- as.factor(train$booking_type_code)
train$reservationstatusid_code <- as.factor(train$reservationstatusid_code)
train$resort_id <- as.factor(train$resort_id)
test$persontravellingid <- as.factor(test$persontravellingid)
test$resort_region_code <- as.factor(test$resort_region_code)
test$resort_type_code <- as.factor(test$resort_type_code)
test$room_type_booked_code <- as.factor(test$room_type_booked_code)
test$season_holidayed_code <- as.factor(test$season_holidayed_code)
test$state_code_resort <- as.factor(test$state_code_resort)
test$state_code_residence <- as.factor(test$state_code_residence)
test$member_age_buckets <- as.factor(test$member_age_buckets)
test$booking_type_code <- as.factor(test$booking_type_code)
test$cluster_code <- as.factor(test$booking_type_code)
test$reservationstatusid_code <- as.factor(test$reservationstatusid_code)
test$resort_id <- as.factor(test$resort_id)
############## Finding Categorical variables ###############
isfactor <-train[,sapply(train,is.factor)]
isfactorcolumns <- colnames(isfactor)
################### Finding Continuos variables ############
iscontinuoscolumns <- setdiff(colnames(train),isfactorcolumns)
iscontinuoscolumns <- iscontinuoscolumns[-5]
iscontinuos <- train[,iscontinuoscolumns]
summary(train)
dim(train)
summary(test)
dim(test)
m1 <- lm(train$amount_spent_per_room_night_scaled ~ ., data = train)
summary(m1)
na_columns = colnames(train)[colSums(is.na(train)) > 0]
na_columns
